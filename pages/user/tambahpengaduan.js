import { Dialog, Transition } from "@headlessui/react";
import { CheckIcon } from "@heroicons/react/outline";
import dayjs from "dayjs";
import "dayjs/locale/id";
import relativeTime from "dayjs/plugin/relativeTime";
import { getAuth } from "firebase/auth";
import { addDoc, collection } from "firebase/firestore";
import { getStorage, ref, uploadBytes } from "firebase/storage";
import Head from "next/head";
import { useRouter } from "next/router";
import React, { Fragment, useState } from "react";
import { useForm } from "react-hook-form";
import { v4 as uuidv4 } from "uuid";
import app, { db } from "../../server/firebaseSDK";
import styles from "../../styles/Home.module.css";
import LayoutUser from "../../components/layout-user";

export default function Admin() {
  const [open, setOpen] = useState(false);
  const { register, handleSubmit, control, reset } = useForm();
  const uid = uuidv4();
  const auth = getAuth();
  const user = auth.currentUser;
  const [imageUpload, setImageUpload] = useState();
  const route = useRouter();
  const storage = getStorage(app);
  const storageRef = ref(storage, `image/${uid}`);
  dayjs.locale("id");
  dayjs.extend(relativeTime);
  const addDatafromDBFirestore = async (data) => {
    try {
      if (imageUpload == null) return;
      uploadBytes(storageRef, imageUpload).then((snapshot) => {});
      await addDoc(collection(db, "pengaduan"), {
        judul_pengaduan: data.judul,
        isi_pengaduan: data.isi,
        penulis_pengaduan: user.displayName,
        tanggal_pengaduan: dayjs().format("ddd, MMM D, YYYY HH:mm"),
        tanggal: dayjs().format(),
        email: user.email,
        gambar: `https://firebasestorage.googleapis.com/v0/b/bptd3sumbar-24e51.appspot.com/o/image%2F${storageRef.name}?alt=media&token=fc601c2a-1e0a-4810-8d2c-1826c3923d36`,
      });

      setOpen(true);
    } catch (error) {
      alert(error);
    }
  };
  /* This example requires Tailwind CSS v2.0+ */

  return (
    <LayoutUser>
      <Head>
        <title>Tambah Berita - Admin</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.png" />
      </Head>
      <Transition.Root show={open} as={Fragment}>
        <Dialog
          as="div"
          className="fixed z-[999] inset-0 overflow-y-auto"
          onClose={() => {
            setOpen(true);
          }}
        >
          <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0"
              enterTo="opacity-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100"
              leaveTo="opacity-0"
            >
              <Dialog.Overlay className="fixed inset-0 bg-slate-800 bg-opacity-50 transition-opacity" />
            </Transition.Child>

            {/* This element is to trick the browser into centering the modal contents. */}
            <span
              className="hidden sm:inline-block sm:align-middle sm:h-screen"
              aria-hidden="true"
            >
              &#8203;
            </span>
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
              enterTo="opacity-100 translate-y-0 sm:scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 translate-y-0 sm:scale-100"
              leaveTo="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
            >
              <div className="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-sm sm:w-full sm:p-6">
                <div>
                  <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100">
                    <CheckIcon
                      className="h-6 w-6 text-green-600"
                      aria-hidden="true"
                    />
                  </div>
                  <div className="mt-3 text-center sm:mt-5">
                    <Dialog.Title
                      as="h3"
                      className="text-lg leading-6 font-medium text-gray-900"
                    >
                      Berhasil
                    </Dialog.Title>
                    <div className="mt-2">
                      <p className="text-sm text-gray-500">
                        Menambahkan berita
                      </p>
                    </div>
                  </div>
                </div>
                <div className="mt-5 sm:mt-6">
                  <button
                    type="button"
                    className="inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:text-sm"
                    onClick={() => {
                      setOpen(false);
                      reset();
                    }}
                  >
                    Ok
                  </button>
                </div>
              </div>
            </Transition.Child>
          </div>
        </Dialog>
      </Transition.Root>
      <div className={styles.main}>
        <form
          className="flex flex-col"
          onSubmit={handleSubmit(addDatafromDBFirestore)}
        >
          <textarea
            className="resize-none mb-2 py-1 px-3 rounded-lg shadow-lg"
            placeholder="Masukan judul*"
            control={control}
            {...register("judul", { required: true })}
          />
          <div>
            <label className="mr-2">Pilih Foto* :</label>
            <input
              className="mb-2 shadow-lg p-2"
              type="file"
              {...register("gambar", { required: false })}
              onChange={(event) => {
                setImageUpload(event.target.files[0]);
              }}
            />
          </div>
          <textarea
            rows={"6"}
            className="mb-2 py-1 px-3 rounded-lg line-h shadow-lg"
            placeholder="Masukan isi*"
            control={control}
            {...register("isi")}
          />{" "}
          <input
            className="hover:bg-gray-900 duration-1000 shadow-lg hover:text-white mb-2 py-1 px-3 rounded-lg hover:cursor-pointer"
            type="submit"
          />
        </form>
      </div>
    </LayoutUser>
  );
}
